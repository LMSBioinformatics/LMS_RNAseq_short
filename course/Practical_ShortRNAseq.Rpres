```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
```


Analysis of RNAseq data
========================================================
author:MRC CSC Bioinformatics Core
date:[http://mrccsc.github.io/RNAseq_short/]
width: 1440
height: 1100
autosize: true
font-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
font-family: 'Slabo 27px', serif;
css:style.css


RNA-seq Introduction 
========================================================

RNA Sequencing (**RNA-seq**) is a well established technique which allows for studying expression profiles of thousands of genes/transcripts simultaneously. 

<div align="center">
<img src="nrg2484-f1.jpg" alt="gene" height="700" width="600">
</div>

* Nature Reviews Genetics 10, 57-63 (January 2009)

RNA-Seq Analysis Workflow 
=======================================================
<div align="center">
<img src="flow2.jpeg" alt="gene" height="900" width="450">
</div>

Contents
====================================
* [Quality Assessment](#/quality).
* [Read alignment](#/alignment).
* [Read counting](#/counting).
* [Differential gene expression analysis](#/de).
* [Exploring and saving results](#/explore).
* [Gene ontology and pathway enrichment analysis](#/go).


Analysis Considerations
========================================================

- Single end or Paired end sequencing experiment?
- Strand specific or non stand specific
- How many factors involved in experiment (genotype, treatment, time course etc.)
- What genome is involved?
- Is it a well annotated organism or a poorly annotated one. 




Set working directory
========================================================

Before running any of the code, we need to set the working directory to the folder we unarchived. 
You may navigate to the unarchived RNAseq_short/course folder in the Rstudio menu

**Session -> Set Working Directory -> Choose Directory**

or in the console.

```{r,eval=F} 

Use the getwd() to see where your current directory is

Use setwd() to set up your directory in the console

setwd("/PathToMyDownload/RNAseq_short/course")

```

**setwd("~/Downloads/RNAseq_short/course")**

Quality Assessment
========================================================
id: quality

Quality assessment can be performed at various levels such as raw reads, aligned data.

Basic checks on the raw data include checking sequence quality, GC content, adaptor contamination,
duplication levels etc. 

Bioconductor packages such as Rsubreads, EDAseq provides functions to retrieve and visualize 
various quality metrics.


Detailed information can be found [here](https://github.com/sanjaykhadayate/rnacourse/blob/master/practical.md).




Read Alignment
========================================================
id: alignment

First step in RNA-Seq data analysis is to align the raw reads to genome/transcriptome. 

For RNASeq data alignment, aligner need to be able to align across the exon-exon junction.

There are many tools that perform splice aware alignment of rnaseq data
such as Tophat, Rsubreads etc.

Output of this step is aligned data in [SAM/BAM format](http://mrccsc.github.io/genomicFormats.html#/11).  

 More information about [alignment](https://github.com/sanjaykhadayate/rnacourse/blob/master/practical.md).



Read Counting
========================================================
id: counting


After alignment, next step is to assign reads to features such as genes, transcripts
or exons. Many tools exists such as htseq or rsubreads.

Output of this step is a count table with reads assigned to individual features. 
This is usually called as raw counts and is input for many tools that perform the
differential expression analysis. 


More info about [Read counting](https://github.com/sanjaykhadayate/rnacourse/blob/master/practical.md).


Material
====================================
Dataset
* [GSE68360] (http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE68360)

We have generated the following files for this session.

- **target** file that contain the sample information.

targets.txt

- **count** matrix  containing count table

AllCounts.csv


```{r,eval=TRUE,echo=FALSE}

library(edgeR)
library(DESeq2)
library(goseq)
library(RColorBrewer)
library(ggplot2)
library(KEGG.db)
library(org.Mm.eg.db)
library(biomaRt)
```



Read sample data
========================================================
id: de

Read in **targets.txt** file by using read.table function

```{r,eval=TRUE,echo=TRUE}

targets <- read.table("targets.txt",sep="\t",header=TRUE)  

```

========================================================
```{r,eval=TRUE,echo=TRUE}

targets

```

Read count data
========================================================

Load count data by using read.csv function

```{r,eval=TRUE,echo=TRUE}

AllCounts<-read.csv(file="AllCounts.csv",row.names = 1)

```

Read count data (Continued)
========================================================
```{r,eval=TRUE,echo=TRUE}
# Show first few rows of "AllCounts" object

head(AllCounts)

# Show the class of AllCounts object

class(AllCounts)
```


Prepare deseqdataset object 
========================================================

 Collect sample information

```{r,eval=TRUE,echo=TRUE}  

                              
cData<-data.frame(name=targets$Sample,                                                                          Group=targets$Group,Batch=targets$Batch)

rownames(cData)<-cData[,1]

cData$Group

cData$Group<-relevel(cData$Group,ref="Viv")
```

========================================================

```{r,eval=TRUE,echo=TRUE}  
  
 cData
 
```

Prepare deseqdataset object (Continued)
========================================================

 Construct deseqdataset object

The class used by the DESeq2 package to store the read counts is **DESeqDataSet**.


```{r,eval=TRUE,echo=TRUE}   

 library(DESeq2)

dds<-DESeqDataSetFromMatrix(
    countData= AllCounts,colData=cData,
    design=~Group)
```

Differential expression analysis
========================================================

The standard differential expression analysis steps are wrapped into a single function, **DESeq**,
which performs normalization, fitting to the model and statistical testing.


```{r,eval=TRUE,echo=TRUE}
 

dds<-DESeq(dds)

```

DESeq function - estimateSizeFactors()
========================================================
The function DESeq runs the following functions in order.


1 - **Estimation of size factors**

The sizeFactors vector assigns to each column of the count matrix a value, the size factor, such that  count  values  in  the  columns  can  be  brought  to  a  common  scale  by  dividing  by  the  corresponding size factor.

```{r,eval=TRUE,echo=TRUE}
#  estimateSizeFactors()

sizeFactors(dds)

```

DESeq function - estimateDispersions()
========================================================

2 - **Estimation of dispersion**

This function obtains gene-wide dispersion estimates. Then, a curve is fit to the estimates to capture the overall trend of dispersion-mean dependence. 

```{r,eval=TRUE,echo=TRUE}
#  estimateDispersions()

head(dispersions(dds))

plotDispEsts(dds)

```

DESeq function - nbinomWaldTest()
========================================================
3- **Hypothesis test for differential expression**

Finally, the function tests whether each model coefficient differs significantly from zero, using previously calculated sizeFactors and dispersion estimates.

DESeq2 reports the standard error for each Log Fold Change estimate.  

For significance testing, DESeq2 uses a Wald test: Log Fold Change is divided by its standard error, resulting in a z-statistic, which is compared to a standard normal distribution to generate p values.

The Wald test P values  are adjusted for multiple testing using the procedure of Benjamini and Hochberg.


```{r,eval=TRUE,echo=TRUE}

#  nbinomWaldTest()

```




Getting results
========================================================

Results tables are generated using the function **results()**, which extracts a results table with log2 fold changes, p  values and adjusted p values.
```{r,eval=TRUE,echo=TRUE}   
# use the function "results()"
res<-results(dds) 

# Order results by adjusted p value 
resOrdered<-res[order(res$padj),]
      
      
```

Getting results
========================================================

```{r,eval=TRUE,echo=TRUE}    
 
head(resOrdered)
      
```

Add Gene symbol
========================================================

```{r,eval=TRUE,echo=TRUE}   

# Add Gene Symbols

library(biomaRt)

mart=useMart('ENSEMBL_MART_ENSEMBL',
dataset='mmusculus_gene_ensembl',
host="may2012.archive.ensembl.org")

bm<-getBM(attributes=c('ensembl_gene_id',                                                                                         'mgi_symbol'),
filters ='ensembl_gene_id',
values=rownames(resOrdered), mart=mart)

# see the first few rows of "bm" object
head(bm)      
```

Add Gene symbol (Continued)
========================================================

```{r,eval=TRUE,echo=TRUE}    
# merge the Gene_symbol to our DE dataset
Allinfo <- merge(as.data.frame(resOrdered),bm,by.x=0,by.y=1)
head(Allinfo)
# change the column name
colnames(Allinfo)[1]<-"ensembl_gene_id"
      
```
Add Gene symbol (Continued)
========================================================

```{r,eval=TRUE,echo=TRUE}    
# Order results by adjusted p value
Allinfo<-Allinfo[order(Allinfo$pvalue,                                                                                                   decreasing=F),]

# show the result with gene symbol annotation
head(Allinfo)
      
```

Saving DEseq2 results
========================================================

Save the result in ".txt" or ".csv" format

```{r,eval=TRUE,echo=TRUE}    


write.table(Allinfo,file="DESeq_result.txt",                                                                                                  sep="\t")
write.csv(Allinfo,file="DESeq_result.csv",                                                                                                    row.names=F)

      
```
Exploring results
========================================================

```{r,eval=TRUE,echo=TRUE}

summary(res)
  
# How many adjusted p-values were less than 0.05?
sum(res$padj < 0.05, na.rm=TRUE)
  
```

Using Contrast
========================================================

```{r,eval=TRUE,echo=TRUE}    
 
    res_contrast<-results(dds,contrast=c("Group","Hfd","Viv")) 

 # the result should same as "res"
    
    summary(res_contrast)
      
```


Exercises
=========================================================

* [RNAseq Exercises](http://mrccsc.github.io/RNAseq_short/course/Exercise_BasicDifferentialAnalysis.html)

Solutions
=========================================================

* [RNAseq Solutions](http://mrccsc.github.io/RNAseq_short/course/Answers_BasicDifferentialAnalysis.html)


Visualization of results
========================================================
id: explore

Transformation of count data

The function **rlog** (regularized log), transforms the original count data to the log2 scale.

Aim of this transformation,  the rlog,  is  to  remove  the  dependence  of  the  variance on  the  mean,  so that data is suitable for visualization. 
Particularly  the  high  variance  of  the  logarithm  of  count  data  when  the  mean  is  low. 
```{r,eval=TRUE,echo=TRUE}
rld<-rlog(dds)  

```

Transformation of count data
========================================================

<div align="center">
<img src="gene.png" alt="gene" height="400" width="800">
</div>
<div align="center">
<img src="rlog.png" alt="gene" height="400" width="800">
</div>



Principal component analysis of the samples
========================================================

**PCA plot** is useful to spot individual sample outliers. 

```{r,eval=TRUE,echo=TRUE}
plotPCA(rld, intgroup="Group")
# save the plot

library(ggplot2)
ggsave(file="PCA_plot_version1.png")
    
```

Principal component analysis of the samples 
========================================================

```{r,eval=TRUE,echo=TRUE}

library(RColorBrewer)

# Creates nice looking color palettes
showcols <- brewer.pal(8, "Set1")[1:length(unique(colData(dds)$Group))]

data <- plotPCA(rld, intgroup="Group", returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))


```

  attr function gets the named attribute of an object.
  Here, gets the percent variation from data object.


PCA of the samples 
========================================================

```{r,eval=TRUE,echo=TRUE}

ggplot(data, aes(PC1, PC2,label=colData(dds)$name))+
  geom_text(col=showcols[colData(dds)$Group],                                                                                                alpha=0.8,size=4)+
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))
ggsave(file="PCA_plot_version2.png")
    
```

Heatmap of sample to sample distances
========================================================

Another use of the transformed data is sample clustering. Here, we apply the dist function to the transpose
of the transformed count matrix to get sample-to-sample distances. 

The assay function is used to extract the matrix of normalized values

```{r,eval=TRUE,echo=TRUE}   

rlogcount <- assay(rld)      
rlogcount <- rlogcount[!rowSums(rlogcount) == 0,]
sampleDists <- as.matrix(dist(t(rlogcount)))
         
```

========================================================

 Save the plot as png file

```{r,eval=FALSE,echo=TRUE}

png(file="sample_dis_map.png")
  heatmap.2(as.matrix(sampleDists), key=F, trace="none",
    col=colorpanel(100, "black", "white"),
    ColSideColors=showcols[colData(dds)$Group], 
    RowSideColors=showcols[colData(dds)$Group],
    margin=c(10, 10), main="Sample Distance Matrix")
dev.off()

```


=======================================================

<div align="center">
<img src="sample_dis_map.png" alt="gene" height="900" width="900">
</div>


MA plot
========================================================
The  function **plotMA()** shows  the  log2  fold  changes  attributable  to  a  given  variable  over  the  mean of normalized counts.  Points will be colored red if the adjusted p value is less than 0.1.  Points which fall out of the window are plotted as open triangles pointing either up or down.

```{r,eval=TRUE,echo=TRUE}

plotMA(res, main="DESeq2", ylim=c(-4,4))

```

Plot counts
========================================================
 **Plot of normalized counts for a single gene on log scale**

```{r,eval=TRUE,echo=TRUE}
plotCounts(dds,gene=which.min(res$padj),                                                                                                 intgroup="Group")

```


Heatmap of the count matrix
========================================================

To explore a counts matrix, it is often useful to look it as heatmap.

```{r,eval=TRUE,echo=TRUE}
# generate DE gene list
  DEgenes4heatmap<-res[res$padj<0.05 & !is.na(res$padj),]
# show the number of DE genes
  nrow(DEgenes4heatmap)
# retrieve rlog values for DE genes
  rlog4heatmap<-rlogcount[rownames(rlogcount) %in% rownames(DEgenes4heatmap),]
  dim(rlog4heatmap)
```

Heatmap of the count matrix
========================================================

```{r,eval=TRUE,echo=TRUE}
head(rlog4heatmap)
```

Heatmap of the count matrix
========================================================

```{r,eval=FALSE,echo=TRUE}
png(file="heatmap1.png")
  testla1<-heatmap.2(rlog4heatmap, Rowv=T, 
      Colv=F, dendrogram="row", cexCol=0.75,cexRow=0.35, 
      keysize=1, cex.main=0.5,symkey=FALSE, trace="none", 
      density.info="none", xlab="samples",
      main="heatmap of rlog value")
dev.off()

```

=======================================================
<div align="center">
<img src="heatmap1.png" alt="gene" height="900" width="900">
</div>

Heatmap of the count matrix
========================================================


```{r,eval=FALSE,echo=TRUE}
scaled_matrix<-t(scale(t(rlog4heatmap)))
show_distance_scale<-dist(scaled_matrix, method="euclidean")
show_cluster_scaled<- hclust(show_distance_scale, method="complete")

png(file="heatmap2.png")
  testla2<-heatmap.2(rlog4heatmap, Rowv=as.dendrogram(show_cluster_scaled), 
      Colv=F, scale="row", dendrogram="row", cexCol=0.75,cexRow=0.35, 
      keysize=1, cex.main=0.5,symkey=FALSE, trace="none", 
      density.info="none", xlab="samples",
      main="z-score heatmap")
dev.off()

```

=======================================================

<div align="center">
<img src="heatmap2.png" alt="gene" height="900" width="900">
</div>

Exercises
=========================================================

* [RNAseq Exercises](http://mrccsc.github.io/RNAseq_short/course/Exercises_Visualization.html)

Solutions
=========================================================

* [RNAseq Solutions](http://mrccsc.github.io/RNAseq_short/course/Answers_Visualization.html)





Multi factor designs
========================================================
Experiments  with  more  than  one  factor  influencing  the  counts  can  be  analyzed  using  design  formula  that  include  the  additional  variables. 
```{r,eval=TRUE,echo=TRUE}
targets

```



========================================================

```{r,eval=TRUE,echo=TRUE}
      
ddsMF<-DESeqDataSetFromMatrix(countData= AllCounts,colData= cData,design=~ Batch + Group)
      
ddsMF <- DESeq(ddsMF)

resMF <- results(ddsMF)

```



========================================================

```{r,eval=TRUE,echo=TRUE}

resMForder<-resMF[order(resMF$padj),]
head(resMForder)

```


========================================================

```{r,eval=TRUE,echo=TRUE}
summary(resMForder)
```


Likelihood Ratio Test
========================================================

DESeq2 offers  two  kinds  of  hypothesis  tests: 
  
  1. **Wald  test**
  
  We  use  the  estimated  standard  error  of a  log2  fold  change  to  test  if  it  is  equal  to  zero.

  2. **Likelihood  ratio  test  (LRT)**
  
  The  LRT  examines  two models  for  the  counts,  a full model  with  a  certain  number  of  terms  and  a
reduced model,  in  which  some  of the terms of the full model are removed.  
The test determines if the increased likelihood of the data using the extra terms in the full model is more than expected if those extra terms are truly zero.

Likelihood Ratio Test (Continued)
========================================================

The **LRT** is therefore useful for testing multiple terms at once, for example testing 3 or more levels of a factor
at once, or all interactions between two variables.

The likelihood ratio test can be specified using the test argument to DESeq , which substitutes
nbinomWaldTest with nbinomLRT.  

In  this  case,  the  user  needs  to  provide  a  reduced  formula,  e.g.   one  in  which  a  number  of terms  from design(dds) are  removed.  



DESeq using LRT
========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}

ddsLRT<-DESeqDataSetFromMatrix(countData= AllCounts,colData= cData,design=~ Batch + Group)

# We would like to see the Group effect hence the reduced=~Batch     
ddsLRT <- DESeq(ddsLRT, test="LRT", 
                full=~Batch+ Group, 
                reduced=~Batch)

resLRT<-results(ddsLRT)

resLRTorder<-resLRT[order(resLRT$padj),]

```

========================================================

```{r,eval=TRUE,echo=TRUE}
head(resLRTorder)

```

========================================================

```{r,eval=TRUE,echo=TRUE}
summary(resLRTorder)


```

Exercises
=========================================================

* [RNAseq Exercises](http://mrccsc.github.io/RNAseq_short/course/Exercise_FunctionalAnalysis.html)

Solutions
=========================================================

* [RNAseq Solutions](http://mrccsc.github.io/RNAseq_short/course/Answers_FunctionalAnalysis.html)



Gene Ontology and Pathway Enrichment Analysis
========================================================
id: go

We will perform GO analysis using goseq package.

 In order to perform a GO analysis of your RNA-seq data,goseq only requires a simple named vector, which contains two pieces of information.

1 **Measured genes**
   
 all genes for which RNA-seq data was gathered for your experiment.  Each element of your vector should be named by a unique gene identifier.

2 **Differentially expressed genes**
   
 each element of your vector should be either a 1 or 0, where 1 indicates that the gene is differentially expressed and 0 that it is not.


========================================================

```{r,eval=TRUE,echo=TRUE}

library(KEGG.db)
library(goseq)

# remove the NAs

resdat<- res[complete.cases(res$padj),]
 
degenes<-as.integer(resdat$padj<0.05)
names(degenes)<-rownames(resdat)
    
# remove duplicate gene names
degenes<-degenes[match(unique(names(degenes)),                                                                                              names(degenes))]

table(degenes)
```


========================================================

**Fitting the probability weighting function (PWF)**

We first need to obtain a weighting for each gene, 
depending on its length, given by the PWF


```{r,eval=TRUE,echo=TRUE}                         

  
pwf=nullp(degenes,genome="mm9",'ensGene',                                                                              plot.fit=FALSE)
  
```

========================================================

```{r,eval=TRUE,echo=TRUE}
  head(pwf)
```

========================================================

```{r,eval=TRUE,echo=TRUE}
   plotPWF(pwf)
```

========================================================

Change the Keggpath id to name in the goseq output

```{r,eval=TRUE,echo=TRUE}

                              
xx <- as.list(KEGGPATHID2NAME)
temp <- cbind(names(xx),unlist(xx))
    
addKeggTogoseq <- function(JX,temp){
  for(l in 1:nrow(JX)){
      if(JX[l,1] %in% temp[,1]){
          JX[l,"term"] <- temp[temp[,1] %in% JX[l,1],2]
          JX[l,"ontology"] <- "KEGG"
      }
  }
  return(JX)
}
```

========================================================

 Calculate  the  over  and  under  expressed  GO
categories among DE genes

```{r,eval=TRUE,echo=TRUE}
    

go<-goseq(pwf,genome="mm9",'ensGene',                                                                                                              test.cats=c("GO:BP","GO:MF","KEGG"))
  
```

========================================================
```{r,eval=TRUE,echo=TRUE}
head(go)

```

========================================================
```{r,eval=TRUE,echo=TRUE}

restemp<-addKeggTogoseq(go,temp)   

head(restemp)
    
```


========================================================
```{r,eval=TRUE,echo=TRUE}
write.table(restemp,file="GO_Kegg_Wallenius.txt", row.names=F,sep="\t")

write.csv(restemp,file="GO_Kegg_Wallenius.csv", row.names=F)
                              
```

Session Information
========================================================
```{r,eval=TRUE,echo=TRUE}
    sessionInfo()
```


Exercises
=========================================================

* [RNAseq Exercises](http://mrccsc.github.io/RNAseq_short/course/Exercise_FunctionalAnalysis.html)


Solutions
=========================================================

* [RNAseq Solutions](http://mrccsc.github.io/RNAseq_short/course/Answers_FunctionalAnalysis.html)
